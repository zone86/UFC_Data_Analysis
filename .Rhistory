R_Heavier, # B_Taller,
#        WeightDifference, #HeightDifference,
AgeDifference,
#        B_Avg_Total_TIP_Misc..Ground.Control.Time,
#        R_Avg_Total_TIP_Misc..Ground.Control.Time,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed
#        # Diff_Total_TIP_Misc..Ground.Control.Time,
#        # #                           Diff_Total_TIP_Control.Time ,
#        #      Diff_Total_Strikes_Distance.Leg.Strikes_Attempts ,
#        #               Diff_Total_Strikes_Total.Strikes_Landed ,
#        # #       Diff_Total_Strikes_Significant.Strikes_Attempts ,
#        # # Diff_Total_Strikes_Legs.Significant.Strikes_Attempts ,
#        # #                  Diff_Total_Grappling_Reversals_Landed,
# #      Diff_Total_Strikes_Distance.Head.Strikes_Landed ,
# #   Diff_Total_Strikes_Head.Significant.Strikes_Landed ,
#         Diff_Total_Strikes_Significant.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
all_data$R_Heavier = factor(all_data$R_Heavier, levels = c('FALSE','TRUE'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1,4)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
rpart.Mod = makeLearner("classif.rpart", predict.type = "prob")
RF.Mod = makeLearner('classif.randomForestSRC', predict.type = "prob")
cforest.Mod = makeLearner("classif.cforest", predict.type = "prob")
C50.Mod = makeLearner("classif.C50", predict.type = "prob")
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
#R_Heavier, # B_Taller,
WeightDifference, #HeightDifference,
AgeDifference,
#        B_Avg_Total_TIP_Misc..Ground.Control.Time,
#        R_Avg_Total_TIP_Misc..Ground.Control.Time,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed
#        # Diff_Total_TIP_Misc..Ground.Control.Time,
#        # #                           Diff_Total_TIP_Control.Time ,
#        #      Diff_Total_Strikes_Distance.Leg.Strikes_Attempts ,
#        #               Diff_Total_Strikes_Total.Strikes_Landed ,
#        # #       Diff_Total_Strikes_Significant.Strikes_Attempts ,
#        # # Diff_Total_Strikes_Legs.Significant.Strikes_Attempts ,
#        # #                  Diff_Total_Grappling_Reversals_Landed,
# #      Diff_Total_Strikes_Distance.Head.Strikes_Landed ,
# #   Diff_Total_Strikes_Head.Significant.Strikes_Landed ,
#         Diff_Total_Strikes_Significant.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
rpart.Mod = makeLearner("classif.rpart", predict.type = "prob")
RF.Mod = makeLearner('classif.randomForestSRC', predict.type = "prob")
cforest.Mod = makeLearner("classif.cforest", predict.type = "prob")
C50.Mod = makeLearner("classif.C50", predict.type = "prob")
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
#R_Heavier, # B_Taller,
#WeightDifference, #HeightDifference,
AgeDifference,
#        B_Avg_Total_TIP_Misc..Ground.Control.Time,
#        R_Avg_Total_TIP_Misc..Ground.Control.Time,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed
#        # Diff_Total_TIP_Misc..Ground.Control.Time,
#        # #                           Diff_Total_TIP_Control.Time ,
#        #      Diff_Total_Strikes_Distance.Leg.Strikes_Attempts ,
#        #               Diff_Total_Strikes_Total.Strikes_Landed ,
#        # #       Diff_Total_Strikes_Significant.Strikes_Attempts ,
#        # # Diff_Total_Strikes_Legs.Significant.Strikes_Attempts ,
#        # #                  Diff_Total_Grappling_Reversals_Landed,
# #      Diff_Total_Strikes_Distance.Head.Strikes_Landed ,
# #   Diff_Total_Strikes_Head.Significant.Strikes_Landed ,
#         Diff_Total_Strikes_Significant.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
set.seed(1)
rpart.train = train(rpart.Mod, task.train)
rpart.test = predict(rpart.train, task.test)
performance(rpart.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
C50.train = train(C50.Mod, task.train)
C50.test = predict(C50.train, task.test)
performance(C50.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
RF.train = train(RF.Mod, task.train)
RF.test = predict(RF.train, task.test)
performance(RF.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
cforest.train = train(cforest.Mod, task.train)
cforest.test = predict(cforest.train, task.test)
performance(cforest.test, measures = list(acc,auc,f1,tpr))
all_target = allDatCleaned$Winner
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
#R_Heavier, # B_Taller,
#WeightDifference, #HeightDifference,
AgeDifference,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed,
B_Avg_Total_TIP_Control.Time,
R_Avg_Total_TIP_Control.Time,
B_Avg_Total_Strikes_Distance.Head.Strikes_Landed,
R_Avg_Total_Strikes_Distance.Head.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
#R_Heavier, # B_Taller,
WeightDifference, #HeightDifference,
AgeDifference,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed,
B_Avg_Total_TIP_Control.Time,
R_Avg_Total_TIP_Control.Time,
B_Avg_Total_Strikes_Distance.Head.Strikes_Landed,
R_Avg_Total_Strikes_Distance.Head.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
#R_Heavier, # B_Taller,
WeightDifference, #HeightDifference,
AgeDifference,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed,
#B_Avg_Total_TIP_Control.Time,
#R_Avg_Total_TIP_Control.Time,
B_Avg_Total_Strikes_Distance.Head.Strikes_Landed,
R_Avg_Total_Strikes_Distance.Head.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_data = allDatCleaned %>%
select(Winner, B_Age, R_Age,
#B_Height, R_Height,
R_Heavier, # B_Taller,
#WeightDifference, #HeightDifference,
AgeDifference,
B_Avg_Total_Strikes_Significant.Strikes_Landed,
R_Avg_Total_Strikes_Significant.Strikes_Landed,
B_Avg_Total_Strikes_Total.Strikes_Landed,
R_Avg_Total_Strikes_Total.Strikes_Landed,
#B_Avg_Total_TIP_Control.Time,
#R_Avg_Total_TIP_Control.Time,
B_Avg_Total_Strikes_Distance.Head.Strikes_Landed,
R_Avg_Total_Strikes_Distance.Head.Strikes_Landed
)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(1)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
rpart.Mod = makeLearner("classif.rpart", predict.type = "prob")
RF.Mod = makeLearner('classif.randomForestSRC', predict.type = "prob")
cforest.Mod = makeLearner("classif.cforest", predict.type = "prob")
C50.Mod = makeLearner("classif.C50", predict.type = "prob")
set.seed(1)
rpart.train = train(rpart.Mod, task.train)
rpart.test = predict(rpart.train, task.test)
performance(rpart.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
C50.train = train(C50.Mod, task.train)
C50.test = predict(C50.train, task.test)
performance(C50.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
RF.train = train(RF.Mod, task.train)
RF.test = predict(RF.train, task.test)
performance(RF.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
cforest.train = train(cforest.Mod, task.train)
cforest.test = predict(cforest.train, task.test)
performance(cforest.test, measures = list(acc,auc,f1,tpr))
colnames(all_fights)
all_data = allDatCleaned %>%
select(-B_Name,-R_Name, -Winby)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_data$R_Heavier = factor(all_data$R_Heavier, levels = c('FALSE','TRUE'))
all_task = makeClassifTask(target = 'Winner', data = all_data)
colnames(all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(176,171)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
featImp$data[order(featImp$data$value, descending = TRUE),]
featImp$data#[order(featImp$data$value, descending = TRUE),]
order(featImp$data$value, descending = TRUE)
order(featImp$data$value, descending = TRUE)
order(featImp$data$value)
featImp$data[order(featImp$data$value, decreasing = T),]
featImp$data[order(featImp$data$value, decreasing = T),][1:10]
featImp$data[order(featImp$data$value, decreasing = T),][10]
featImp$data[order(featImp$data$value, decreasing = T),1:10]
head(featImp$data[order(featImp$data$value, decreasing = T)])
featImp$data[order(featImp$data$value, decreasing = T),]
head(featImp$data[order(featImp$data$value, decreasing = T),])
head(featImp$data[order(featImp$data$value, decreasing = T),],10)
head(featImp$data[order(featImp$data$value, decreasing = T),],20)
head(featImp$data[order(featImp$data$value, decreasing = T),],10)
head(featImp$data[order(featImp$data$value, decreasing = T),],15)
head(featImp$data[order(featImp$data$value, decreasing = T),],18)
head(featImp$data[order(featImp$data$value, decreasing = T),],20)
head(featImp$data[order(featImp$data$value, decreasing = T),],30)
head(featImp$data[order(featImp$data$value, decreasing = T),],40)
head(featImp$data[order(featImp$data$value, decreasing = T),],50)
head(featImp$data[order(featImp$data$value, decreasing = T),],80)
head(featImp$data[order(featImp$data$value, decreasing = T),],70)
head(featImp$data[order(featImp$data$value, decreasing = T),],71)
head(featImp$data[order(featImp$data$value, decreasing = T),],71)
head(featImp$data[order(featImp$data$value, decreasing = T),],72)
head(featImp$data[order(featImp$data$value, decreasing = T),],73)
head(featImp$data[order(featImp$data$value, decreasing = T),],74)
head(featImp$data[order(featImp$data$value, decreasing = T),],75)
head(featImp$data[order(featImp$data$value, decreasing = T),],76)
head(featImp$data[order(featImp$data$value, decreasing = T),],75)
plotFilterValues(head(featImp$data[order(featImp$data$value, decreasing = T),],75)) + ggtitle('Feature Importance Random Forest SRC')
head(featImp$data[order(featImp$data$value, decreasing = T),],60)
head(featImp$data[order(featImp$data$value, decreasing = T),],50)
head(featImp$data[order(featImp$data$value, decreasing = T),],20)
head(featImp$data[order(featImp$data$value, decreasing = T),],25)
head(featImp$data[order(featImp$data$value, decreasing = T),],30)
head(featImp$data[order(featImp$data$value, decreasing = T),],28)
head(featImp$data[order(featImp$data$value, decreasing = T),],27)
head(featImp$data$name[order(featImp$data$value, decreasing = T),],27)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],27)
all_data = allDatCleaned %>%
select(head(featImp$data$name[order(featImp$data$value, decreasing = T)],27))
vars = head(featImp$data$name[order(featImp$data$value, decreasing = T)],27)
all_data = allDatCleaned %>%
select(vars)
vars
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_data = allDatCleaned %>%
select(vars, Winner)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
colnames(all_task)
colnames(all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(28)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
rpart.Mod = makeLearner("classif.rpart", predict.type = "prob")
RF.Mod = makeLearner('classif.randomForestSRC', predict.type = "prob")
cforest.Mod = makeLearner("classif.cforest", predict.type = "prob")
C50.Mod = makeLearner("classif.C50", predict.type = "prob")
set.seed(1)
rpart.train = train(rpart.Mod, task.train)
rpart.test = predict(rpart.train, task.test)
performance(rpart.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
C50.train = train(C50.Mod, task.train)
C50.test = predict(C50.train, task.test)
performance(C50.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
RF.train = train(RF.Mod, task.train)
RF.test = predict(RF.train, task.test)
performance(RF.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
cforest.train = train(cforest.Mod, task.train)
cforest.test = predict(cforest.train, task.test)
performance(cforest.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
head(featImp$data$name[order(featImp$data$value, decreasing = T)]
)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],20)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],16)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)
vars = head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)
all_data = allDatCleaned %>%
select(vars, Winner)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
colnames(all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(16)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-15]
vars = head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-15]
vars
all_data = allDatCleaned %>%
select(vars, Winner)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
colnames(all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(15)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-15]
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-c(15,14,13,12,11)]
vars = head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-c(15,14,13,12,11)]
all_data = allDatCleaned %>%
select(vars, Winner)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(15)] )
colnames(all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(11)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
cv = makeResampleDesc("CV", iters = 3)
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
all_target = allDatCleaned$Winner
vars = head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-c(15,14,13,12,11,10)]
vars
all_data = allDatCleaned %>%
select(vars, Winner)
all_data = all_data[!(all_data$Winner %in% c('no contest','draw')),]
all_data$Winner = factor(all_data$Winner, levels = c('blue','red'))
idx = sapply(all_data, function(x) is.nan(x))
all_data[idx] = NA
all_task = makeClassifTask(target = 'Winner', data = all_data)
all_task = normalizeFeatures(obj = all_task, method = 'standardize',
cols = colnames(all_data)[-c(11)] )
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
set.seed(1)
featImp = generateFilterValuesData(task= all_task)
plotFilterValues(featImp) + ggtitle('Feature Importance Random Forest SRC')
set.seed(1)
ho = makeResampleInstance( "Holdout", all_task)
task.train = subsetTask(all_task,ho$train.inds[[1]])
task.test = subsetTask(all_task,ho$test.inds[[1]])
rpart.Mod = makeLearner("classif.rpart", predict.type = "prob")
RF.Mod = makeLearner('classif.randomForestSRC', predict.type = "prob")
cforest.Mod = makeLearner("classif.cforest", predict.type = "prob")
C50.Mod = makeLearner("classif.C50", predict.type = "prob")
set.seed(1)
rpart.train = train(rpart.Mod, task.train)
rpart.test = predict(rpart.train, task.test)
performance(rpart.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
C50.train = train(C50.Mod, task.train)
C50.test = predict(C50.train, task.test)
performance(C50.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
RF.train = train(RF.Mod, task.train)
RF.test = predict(RF.train, task.test)
performance(RF.test, measures = list(acc,auc,f1,tpr))
set.seed(1)
cforest.train = train(cforest.Mod, task.train)
cforest.test = predict(cforest.train, task.test)
performance(cforest.test, measures = list(acc,auc,f1,tpr))
head(featImp$data$name[order(featImp$data$value, decreasing = T)],15)[-c(15,14,13,12,11,10)]
source('get_UFCData.R')
source('get_UFCData.R')
source('~/UFCData/UFCAnalysis/createFighterStats.R', echo=TRUE)
# create fight data frame with fight stats
fightNames = UFCDat %>% select(B_Name, R_Name)
sapply(all_stats, function(x) length(which(!is.na(x)))/nrow(all_stats))
all_avg_stats = rbind(avg_blue_stats,avg_red_stats)
source('~/UFCData/UFCAnalysis/createFighterStats.R', echo=TRUE)
source('~/UFCData/UFCAnalysis/createFighterStats.R', echo=TRUE)
